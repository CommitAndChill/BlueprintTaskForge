// Copyright (c) 2025 BlueprintTaskForge Maintainers
// 
// This file is part of the BlueprintTaskForge Plugin for Unreal Engine.
// 
// Licensed under the BlueprintTaskForge Open Plugin License v1.0 (BTFPL-1.0).
// You may obtain a copy of the license at:
// https://github.com/CommitAndChill/BlueprintTaskForge/blob/main/LICENSE.md
// 
// SPDX-License-Identifier: BTFPL-1.0

#pragma once

#include "CoreMinimal.h"
#include "Templates/SubclassOf.h"
#include "BtfNameSelect.h"
#include "BftMacros.h"

#include "Blueprint/BlueprintExtension.h"
#include "StructUtils/InstancedStruct.h"
#include "UObject/Object.h"

#include "BtfTaskForge.generated.h"

// --------------------------------------------------------------------------------------------------------------------

#if WITH_EDITOR
class UBtf_NodeDecorator;
DECLARE_DELEGATE_OneParam(FOnPostPropertyChanged, FPropertyChangedEvent);
#endif

class UWorld;

USTRUCT(BlueprintType)
struct FCustomOutputPin
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadWrite, EditAnywhere)
    FString PinName;

    UPROPERTY(BlueprintReadWrite, EditAnywhere)
    FString Tooltip;

    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta = (MetaStruct = "FCustomOutputPinData"))
    TObjectPtr<UScriptStruct> PayloadType;
};

USTRUCT(BlueprintType)
struct FCustomOutputPinData
{
    GENERATED_BODY()
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FCustomPinDelegate, FName, PinName, TInstancedStruct<FCustomOutputPinData>, Data);

// --------------------------------------------------------------------------------------------------------------------

UCLASS(Abstract, Blueprintable, BlueprintType, EditInlineNew)
class BLUEPRINTTASKFORGE_API UBtf_TaskForge : public UBlueprintExtension
{
    GENERATED_BODY()

public:
    UBtf_TaskForge(const FObjectInitializer& ObjectInitializer);

    // Static Functions
    UFUNCTION(
        BlueprintCallable,
        Category = "BlueprintTaskForge",
        meta =
            (DisplayName = "BlueprintTaskForge",
             DefaultToSelf = "Outer",
             BlueprintInternalUseOnly = "TRUE",
             DeterminesOutputType = "Class",
             Keywords = "BP Blueprint Task Forge"))
    static UBtf_TaskForge* BlueprintTaskForge(UObject* Outer, TSubclassOf<UBtf_TaskForge> Class, FString NodeGuidStr);

    static UBtf_TaskForge* GetTaskByNodeGUID(UObject* Outer, FString NodeGUID);

    /* Gets all objects that have @Object assigned as their outer
     * and recursively deactivates all tasks it finds.
     * This includes nested objects, so for example; if @Object is
     * an actor and its actor components have a task active and the
     * component is its outer, this will also deactivate those tasks. */
    UFUNCTION(Category = "BlueprintTaskForge", BlueprintCallable, meta = (DefaultToSelf = "Object"))
    static void DeactivateAllTasksRelatedToObject(UObject* Object);

    // Blueprint Functions
    UFUNCTION(BlueprintCallable, Category = "BlueprintTaskForge", meta = (DisplayName = "Activate", ExposeAutoCall = "true"))
    void Activate();

    UFUNCTION(BlueprintCallable, Category = "BlueprintTaskForge", meta = (DisplayName = "Deactivate", ExposeAutoCall = "false"))
    void Deactivate();

    /* Triggers a output pin that was generated by @Get_CustomOutputPins.
     * This does NOT trigger the other output pins that are generated
     * by delegates on the node. */
    UFUNCTION(Category = "BlueprintTaskForge", BlueprintCallable, BlueprintInternalUseOnly)
    virtual void TriggerCustomOutputPin(UPARAM(Meta=(GetOptions = "Get_CustomOutputPinNames")) FName OutputPin, TInstancedStruct<FCustomOutputPinData> Data);

    UFUNCTION(Category = "BlueprintTaskForge", BlueprintCallable)
    TArray<FName> Get_CustomOutputPinNames() const;

    UFUNCTION(Category = "BlueprintTaskForge", BlueprintCallable, BlueprintPure)
    bool IsExtension() const;

    // Blueprint Native Events
    UFUNCTION(BlueprintNativeEvent, Category = "BlueprintTaskForge")
    TArray<FCustomOutputPin> Get_CustomOutputPins() const;

    UFUNCTION(BlueprintNativeEvent, Category = "Editor", meta = (DevelopmentOnly, DisplayName = "Validate Node During Compilation (Editor Only)"))
    TArray<FString> ValidateNodeDuringCompilation();

    UFUNCTION(BlueprintNativeEvent, Category = "Editor", meta = (DevelopmentOnly))
    bool Get_NodeTitleColor(FLinearColor& Color);

    UFUNCTION(BlueprintNativeEvent, Category = "BlueprintTaskForge", meta = (DisplayName = "Get Node Description"))
    FString Get_NodeDescription() const;

    UFUNCTION(BlueprintNativeEvent, Category = "BlueprintTaskForge", meta = (DisplayName = "Get Status String"))
    FString Get_StatusString() const;

    UFUNCTION(BlueprintNativeEvent, Category = "BlueprintTaskForge", meta = (DisplayName = "Get Status Background Color"))
    bool Get_StatusBackgroundColor(FLinearColor& OutColor) const;

    // Virtual Functions
    virtual UWorld* GetWorld() const override;
    virtual void OnDestroy();
    virtual void Serialize(FArchive& Ar) override;
    virtual void TrackTaskForAutomaticDeactivation(UBtf_TaskForge* Task);
    virtual void UntrackTaskForAutomaticDeactivation(UBtf_TaskForge* Task);

    // Properties
    UPROPERTY(BlueprintAssignable)
    FCustomPinDelegate OnCustomPinTriggered;

#if WITH_EDITORONLY_DATA
    UPROPERTY(Category = "Decorator", EditDefaultsOnly)
    TSubclassOf<UBtf_NodeDecorator> Decorator = nullptr;

    UPROPERTY(EditDefaultsOnly, Category = "DisplayOptions")
    FName Category = NAME_None;

    UPROPERTY(EditDefaultsOnly, Category = "DisplayOptions", meta = (MultiLine = true))
    FName Tooltip = NAME_None;

    UPROPERTY(EditDefaultsOnly, Category = "DisplayOptions")
    FName MenuDisplayName = NAME_None;

    UPROPERTY(VisibleDefaultsOnly, Category = "ExposeOptions")
    TSet<FName> AllDelegates;

    UPROPERTY(VisibleDefaultsOnly, Category = "ExposeOptions")
    TSet<FName> AllFunctions;

    UPROPERTY(VisibleDefaultsOnly, Category = "ExposeOptions")
    TSet<FName> AllFunctionsExec;

    UPROPERTY(VisibleDefaultsOnly, Category = "ExposeOptions")
    TSet<FName> AllParam;

    UPROPERTY(EditDefaultsOnly, Category = "ExposeOptions")
    TArray<FBtf_NameSelect> SpawnParam;

    UPROPERTY(EditDefaultsOnly, Category = "ExposeOptions")
    TArray<FBtf_NameSelect> AutoCallFunction;

    UPROPERTY(EditDefaultsOnly, Category = "ExposeOptions")
    TArray<FBtf_NameSelect> ExecFunction;

    UPROPERTY(EditDefaultsOnly, Category = "ExposeOptions")
    TArray<FBtf_NameSelect> InDelegate;

    UPROPERTY(EditDefaultsOnly, Category = "ExposeOptions")
    TArray<FBtf_NameSelect> OutDelegate;

    UPROPERTY(EditDefaultsOnly, Category = "Developer Settings")
    TArray<TSoftClassPtr<UObject>> ClassLimitations;

    FOnPostPropertyChanged OnPostPropertyChanged;
#endif

protected:
    // Blueprint Implementable Events
    UFUNCTION(BlueprintImplementableEvent, Category = "BlueprintTaskForge", meta = (DisplayName = "Activate"))
    void Activate_BP();

    UFUNCTION(BlueprintImplementableEvent, Category = "BlueprintTaskForge", meta = (DisplayName = "Deactivate"))
    void Deactivate_BP();

    UFUNCTION()
    void OnActorOuterDestroyed(AActor* Actor);

    // Virtual Protected Functions
    virtual void Activate_Internal();
    virtual void Deactivate_Internal();
    virtual void SetupAutomaticCleanup();

#if WITH_EDITOR
public:
    void RefreshCollected();
    auto Get_IsActive() const -> bool;

protected:
    virtual void PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent) override;
    static void CollectSpawnParam(const UClass* InClass, TSet<FName>& Out);
    static void CollectFunctions(const UClass* InClass, TSet<FName>& Out);
    static void CollectDelegates(const UClass* InClass, TSet<FName>& Out);
    static void CleanInvalidParams(TArray<FBtf_NameSelect>& Arr, const TSet<FName>& ArrRef);
#endif

private:
    UPROPERTY(Transient)
    bool IsBeingDestroyed = false;

    UPROPERTY(Transient)
    bool IsActive = false;

    TArray<TWeakObjectPtr<UBtf_TaskForge>> TasksToDeactivateOnDeactivate;
};

// --------------------------------------------------------------------------------------------------------------------